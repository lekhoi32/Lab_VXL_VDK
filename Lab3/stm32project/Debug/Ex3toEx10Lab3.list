
Ex3toEx10Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002858  08002858  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002858  08002858  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000005c  080028bc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080028bc  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f5c  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0e  00000000  00000000  00029fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e3  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6c2  00000000  00000000  000441d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008278e  00000000  00000000  00050895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000d3078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800281c 	.word	0x0800281c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800281c 	.word	0x0800281c

0800014c <fsm_automatic_run>:
 */

#include "fsm_automatic.h"


void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b9c      	ldr	r3, [pc, #624]	; (80003c4 <fsm_automatic_run+0x278>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 819d 	bhi.w	8000496 <fsm_automatic_run+0x34a>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001df 	.word	0x080001df
 800016c:	0800027f 	.word	0x0800027f
 8000170:	08000327 	.word	0x08000327
 8000174:	080003f5 	.word	0x080003f5
	/*in INIT status, it status is assigned AUTO_RED_GREEN
	assign timeRed, timeGreen, timeYellow
	tempRed, tempYellow, tempGreen to corresponding value
	*/
	case INIT:
		status = AUTO_RED_GREEN;
 8000178:	4b92      	ldr	r3, [pc, #584]	; (80003c4 <fsm_automatic_run+0x278>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
		setTimer1(defaultTimeGreen*1000);
 800017e:	4b92      	ldr	r3, [pc, #584]	; (80003c8 <fsm_automatic_run+0x27c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000186:	fb02 f303 	mul.w	r3, r2, r3
 800018a:	4618      	mov	r0, r3
 800018c:	f000 feca 	bl	8000f24 <setTimer1>
		timeRed = defaultTimeRed;
 8000190:	4b8e      	ldr	r3, [pc, #568]	; (80003cc <fsm_automatic_run+0x280>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a8e      	ldr	r2, [pc, #568]	; (80003d0 <fsm_automatic_run+0x284>)
 8000196:	6013      	str	r3, [r2, #0]
		timeGreen = defaultTimeGreen;
 8000198:	4b8b      	ldr	r3, [pc, #556]	; (80003c8 <fsm_automatic_run+0x27c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a8d      	ldr	r2, [pc, #564]	; (80003d4 <fsm_automatic_run+0x288>)
 800019e:	6013      	str	r3, [r2, #0]
		tempRed = defaultTimeRed;
 80001a0:	4b8a      	ldr	r3, [pc, #552]	; (80003cc <fsm_automatic_run+0x280>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a8c      	ldr	r2, [pc, #560]	; (80003d8 <fsm_automatic_run+0x28c>)
 80001a6:	6013      	str	r3, [r2, #0]
		tempYellow = defaultTimeYellow;
 80001a8:	4b8c      	ldr	r3, [pc, #560]	; (80003dc <fsm_automatic_run+0x290>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a8c      	ldr	r2, [pc, #560]	; (80003e0 <fsm_automatic_run+0x294>)
 80001ae:	6013      	str	r3, [r2, #0]
		tempGreen = defaultTimeGreen;
 80001b0:	4b85      	ldr	r3, [pc, #532]	; (80003c8 <fsm_automatic_run+0x27c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a8b      	ldr	r2, [pc, #556]	; (80003e4 <fsm_automatic_run+0x298>)
 80001b6:	6013      	str	r3, [r2, #0]
		setTimer2(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f000 fece 	bl	8000f5c <setTimer2>
		updateClockBuffer(timeRed--, timeGreen--);
 80001c0:	4b83      	ldr	r3, [pc, #524]	; (80003d0 <fsm_automatic_run+0x284>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	1e5a      	subs	r2, r3, #1
 80001c6:	4982      	ldr	r1, [pc, #520]	; (80003d0 <fsm_automatic_run+0x284>)
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	4a82      	ldr	r2, [pc, #520]	; (80003d4 <fsm_automatic_run+0x288>)
 80001cc:	6812      	ldr	r2, [r2, #0]
 80001ce:	1e51      	subs	r1, r2, #1
 80001d0:	4880      	ldr	r0, [pc, #512]	; (80003d4 <fsm_automatic_run+0x288>)
 80001d2:	6001      	str	r1, [r0, #0]
 80001d4:	4611      	mov	r1, r2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fc36 	bl	8000a48 <updateClockBuffer>
		break;
 80001dc:	e164      	b.n	80004a8 <fsm_automatic_run+0x35c>
	 * and call updateClockBuffer to update value is displayed in led 7 Segment
	 * with parameter is timeRed-- and timeYellow--
	 * if timer2_flag = 1, update and decrease timeRed and timeGreen
	 * if is_button_pressed(0) = 1, move to MAN_MODE2
	 */
		setTrafficRed();
 80001de:	f000 ff37 	bl	8001050 <setTrafficRed>
		setTrafficGreen1();
 80001e2:	f000 ff8d 	bl	8001100 <setTrafficGreen1>
		if(timer1_flag == 1){
 80001e6:	4b80      	ldr	r3, [pc, #512]	; (80003e8 <fsm_automatic_run+0x29c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d121      	bne.n	8000232 <fsm_automatic_run+0xe6>
			status = AUTO_RED_YELLOW;
 80001ee:	4b75      	ldr	r3, [pc, #468]	; (80003c4 <fsm_automatic_run+0x278>)
 80001f0:	2203      	movs	r2, #3
 80001f2:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeYellow*1000);
 80001f4:	4b79      	ldr	r3, [pc, #484]	; (80003dc <fsm_automatic_run+0x290>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001fc:	fb02 f303 	mul.w	r3, r2, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fe8f 	bl	8000f24 <setTimer1>
			timeYellow = defaultTimeYellow;
 8000206:	4b75      	ldr	r3, [pc, #468]	; (80003dc <fsm_automatic_run+0x290>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a78      	ldr	r2, [pc, #480]	; (80003ec <fsm_automatic_run+0x2a0>)
 800020c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRed--, timeYellow--);
 800020e:	4b70      	ldr	r3, [pc, #448]	; (80003d0 <fsm_automatic_run+0x284>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	1e5a      	subs	r2, r3, #1
 8000214:	496e      	ldr	r1, [pc, #440]	; (80003d0 <fsm_automatic_run+0x284>)
 8000216:	600a      	str	r2, [r1, #0]
 8000218:	4a74      	ldr	r2, [pc, #464]	; (80003ec <fsm_automatic_run+0x2a0>)
 800021a:	6812      	ldr	r2, [r2, #0]
 800021c:	1e51      	subs	r1, r2, #1
 800021e:	4873      	ldr	r0, [pc, #460]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000220:	6001      	str	r1, [r0, #0]
 8000222:	4611      	mov	r1, r2
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fc0f 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 800022a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022e:	f000 fe95 	bl	8000f5c <setTimer2>
		}
		if(timer2_flag == 1){
 8000232:	4b6f      	ldr	r3, [pc, #444]	; (80003f0 <fsm_automatic_run+0x2a4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d111      	bne.n	800025e <fsm_automatic_run+0x112>
			updateClockBuffer(timeRed--, timeGreen--);
 800023a:	4b65      	ldr	r3, [pc, #404]	; (80003d0 <fsm_automatic_run+0x284>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1e5a      	subs	r2, r3, #1
 8000240:	4963      	ldr	r1, [pc, #396]	; (80003d0 <fsm_automatic_run+0x284>)
 8000242:	600a      	str	r2, [r1, #0]
 8000244:	4a63      	ldr	r2, [pc, #396]	; (80003d4 <fsm_automatic_run+0x288>)
 8000246:	6812      	ldr	r2, [r2, #0]
 8000248:	1e51      	subs	r1, r2, #1
 800024a:	4862      	ldr	r0, [pc, #392]	; (80003d4 <fsm_automatic_run+0x288>)
 800024c:	6001      	str	r1, [r0, #0]
 800024e:	4611      	mov	r1, r2
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fbf9 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f000 fe7f 	bl	8000f5c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 800025e:	2000      	movs	r0, #0
 8000260:	f000 fbb2 	bl	80009c8 <is_button_pressed>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	f040 8117 	bne.w	800049a <fsm_automatic_run+0x34e>
			setTimer1(250);
 800026c:	20fa      	movs	r0, #250	; 0xfa
 800026e:	f000 fe59 	bl	8000f24 <setTimer1>
			status = MAN_MODE2;
 8000272:	4b54      	ldr	r3, [pc, #336]	; (80003c4 <fsm_automatic_run+0x278>)
 8000274:	220b      	movs	r2, #11
 8000276:	601a      	str	r2, [r3, #0]
			setTrafficOffall();
 8000278:	f000 ff6e 	bl	8001158 <setTrafficOffall>
		}
		break;
 800027c:	e10d      	b.n	800049a <fsm_automatic_run+0x34e>
		 * and call updateClockBuffer to update value is displayed in led 7 Segment
		 * with parameter is timeGreen-- and timeRed--
		 * if timer2_flag = 1, update and decrease timeRed and timeYelow
		 * if is_button_pressed(0) = 1, move to MAN_MODE2
		 */
		setTrafficRed();
 800027e:	f000 fee7 	bl	8001050 <setTrafficRed>
		setTrafficYellow1();
 8000282:	f000 ff53 	bl	800112c <setTrafficYellow1>
		if(timer1_flag == 1){
 8000286:	4b58      	ldr	r3, [pc, #352]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d125      	bne.n	80002da <fsm_automatic_run+0x18e>
			status = AUTO_GREEN_RED;
 800028e:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <fsm_automatic_run+0x278>)
 8000290:	2204      	movs	r2, #4
 8000292:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 8000294:	4b4c      	ldr	r3, [pc, #304]	; (80003c8 <fsm_automatic_run+0x27c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800029c:	fb02 f303 	mul.w	r3, r2, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fe3f 	bl	8000f24 <setTimer1>
			timeGreen = defaultTimeGreen;
 80002a6:	4b48      	ldr	r3, [pc, #288]	; (80003c8 <fsm_automatic_run+0x27c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a4a      	ldr	r2, [pc, #296]	; (80003d4 <fsm_automatic_run+0x288>)
 80002ac:	6013      	str	r3, [r2, #0]
			timeRed = defaultTimeRed;
 80002ae:	4b47      	ldr	r3, [pc, #284]	; (80003cc <fsm_automatic_run+0x280>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a47      	ldr	r2, [pc, #284]	; (80003d0 <fsm_automatic_run+0x284>)
 80002b4:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeGreen--, timeRed--);
 80002b6:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <fsm_automatic_run+0x288>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	4945      	ldr	r1, [pc, #276]	; (80003d4 <fsm_automatic_run+0x288>)
 80002be:	600a      	str	r2, [r1, #0]
 80002c0:	4a43      	ldr	r2, [pc, #268]	; (80003d0 <fsm_automatic_run+0x284>)
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	1e51      	subs	r1, r2, #1
 80002c6:	4842      	ldr	r0, [pc, #264]	; (80003d0 <fsm_automatic_run+0x284>)
 80002c8:	6001      	str	r1, [r0, #0]
 80002ca:	4611      	mov	r1, r2
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fbbb 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 fe41 	bl	8000f5c <setTimer2>
		}
		if(timer2_flag == 1){
 80002da:	4b45      	ldr	r3, [pc, #276]	; (80003f0 <fsm_automatic_run+0x2a4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d111      	bne.n	8000306 <fsm_automatic_run+0x1ba>
			updateClockBuffer(timeRed--, timeYellow--);
 80002e2:	4b3b      	ldr	r3, [pc, #236]	; (80003d0 <fsm_automatic_run+0x284>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	1e5a      	subs	r2, r3, #1
 80002e8:	4939      	ldr	r1, [pc, #228]	; (80003d0 <fsm_automatic_run+0x284>)
 80002ea:	600a      	str	r2, [r1, #0]
 80002ec:	4a3f      	ldr	r2, [pc, #252]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002ee:	6812      	ldr	r2, [r2, #0]
 80002f0:	1e51      	subs	r1, r2, #1
 80002f2:	483e      	ldr	r0, [pc, #248]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002f4:	6001      	str	r1, [r0, #0]
 80002f6:	4611      	mov	r1, r2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fba5 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 80002fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000302:	f000 fe2b 	bl	8000f5c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 8000306:	2000      	movs	r0, #0
 8000308:	f000 fb5e 	bl	80009c8 <is_button_pressed>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	f040 80c5 	bne.w	800049e <fsm_automatic_run+0x352>
			setTimer1(250);
 8000314:	20fa      	movs	r0, #250	; 0xfa
 8000316:	f000 fe05 	bl	8000f24 <setTimer1>
			status = MAN_MODE2;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <fsm_automatic_run+0x278>)
 800031c:	220b      	movs	r2, #11
 800031e:	601a      	str	r2, [r3, #0]
			setTrafficOffall();
 8000320:	f000 ff1a 	bl	8001158 <setTrafficOffall>
		}
		break;
 8000324:	e0bb      	b.n	800049e <fsm_automatic_run+0x352>
		 * and call updateClockBuffer to update value is displayed in led 7 Segment
		 * with parameter is timeYelow-- and timeRed--
		 * if timer2_flag = 1, update and decrease timeGreen and timeRed
		 * if is_button_pressed(0) = 1, move to MAN_MODE2
		 */
		setTrafficGreen();
 8000326:	f000 fea9 	bl	800107c <setTrafficGreen>
		setTrafficRed1();
 800032a:	f000 fed3 	bl	80010d4 <setTrafficRed1>
		if(timer1_flag == 1){
 800032e:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d121      	bne.n	800037a <fsm_automatic_run+0x22e>
			status = AUTO_YELLOW_RED;
 8000336:	4b23      	ldr	r3, [pc, #140]	; (80003c4 <fsm_automatic_run+0x278>)
 8000338:	2205      	movs	r2, #5
 800033a:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeYellow*1000);
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <fsm_automatic_run+0x290>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fdeb 	bl	8000f24 <setTimer1>
			timeYellow = defaultTimeYellow;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <fsm_automatic_run+0x290>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a26      	ldr	r2, [pc, #152]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000354:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeYellow--, timeRed--);
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1e5a      	subs	r2, r3, #1
 800035c:	4923      	ldr	r1, [pc, #140]	; (80003ec <fsm_automatic_run+0x2a0>)
 800035e:	600a      	str	r2, [r1, #0]
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <fsm_automatic_run+0x284>)
 8000362:	6812      	ldr	r2, [r2, #0]
 8000364:	1e51      	subs	r1, r2, #1
 8000366:	481a      	ldr	r0, [pc, #104]	; (80003d0 <fsm_automatic_run+0x284>)
 8000368:	6001      	str	r1, [r0, #0]
 800036a:	4611      	mov	r1, r2
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fb6b 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 8000372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000376:	f000 fdf1 	bl	8000f5c <setTimer2>
		}
		if(timer2_flag == 1){
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d111      	bne.n	80003a6 <fsm_automatic_run+0x25a>
			updateClockBuffer(timeGreen--, timeRed--);
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <fsm_automatic_run+0x288>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	1e5a      	subs	r2, r3, #1
 8000388:	4912      	ldr	r1, [pc, #72]	; (80003d4 <fsm_automatic_run+0x288>)
 800038a:	600a      	str	r2, [r1, #0]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <fsm_automatic_run+0x284>)
 800038e:	6812      	ldr	r2, [r2, #0]
 8000390:	1e51      	subs	r1, r2, #1
 8000392:	480f      	ldr	r0, [pc, #60]	; (80003d0 <fsm_automatic_run+0x284>)
 8000394:	6001      	str	r1, [r0, #0]
 8000396:	4611      	mov	r1, r2
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fb55 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f000 fddb 	bl	8000f5c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fb0e 	bl	80009c8 <is_button_pressed>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d177      	bne.n	80004a2 <fsm_automatic_run+0x356>
			setTimer1(250);
 80003b2:	20fa      	movs	r0, #250	; 0xfa
 80003b4:	f000 fdb6 	bl	8000f24 <setTimer1>
			status = MAN_MODE2;
 80003b8:	4b02      	ldr	r3, [pc, #8]	; (80003c4 <fsm_automatic_run+0x278>)
 80003ba:	220b      	movs	r2, #11
 80003bc:	601a      	str	r2, [r3, #0]
			setTrafficOffall();
 80003be:	f000 fecb 	bl	8001158 <setTrafficOffall>
		}
		break;
 80003c2:	e06e      	b.n	80004a2 <fsm_automatic_run+0x356>
 80003c4:	20000078 	.word	0x20000078
 80003c8:	2000001c 	.word	0x2000001c
 80003cc:	20000018 	.word	0x20000018
 80003d0:	2000000c 	.word	0x2000000c
 80003d4:	20000010 	.word	0x20000010
 80003d8:	20000024 	.word	0x20000024
 80003dc:	20000020 	.word	0x20000020
 80003e0:	2000002c 	.word	0x2000002c
 80003e4:	20000028 	.word	0x20000028
 80003e8:	200000b8 	.word	0x200000b8
 80003ec:	20000014 	.word	0x20000014
 80003f0:	200000bc 	.word	0x200000bc
		 * and call updateClockBuffer to update value is displayed in led 7 Segment
		 * with parameter is timeRed-- and timeGreen--
		 * if timer2_flag = 1, update and decrease timeYellow and timeRed
		 *  if is_button_pressed(0) = 1, move to MAN_MODE2
		 */
		setTrafficYellow();
 80003f4:	f000 fe58 	bl	80010a8 <setTrafficYellow>
		setTrafficRed1();
 80003f8:	f000 fe6c 	bl	80010d4 <setTrafficRed1>
		if(timer1_flag == 1){
 80003fc:	4b2b      	ldr	r3, [pc, #172]	; (80004ac <fsm_automatic_run+0x360>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d125      	bne.n	8000450 <fsm_automatic_run+0x304>
			status = AUTO_RED_GREEN;
 8000404:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <fsm_automatic_run+0x364>)
 8000406:	2202      	movs	r2, #2
 8000408:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 800040a:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <fsm_automatic_run+0x368>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000412:	fb02 f303 	mul.w	r3, r2, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fd84 	bl	8000f24 <setTimer1>
			timeRed = defaultTimeRed;
 800041c:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <fsm_automatic_run+0x36c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a26      	ldr	r2, [pc, #152]	; (80004bc <fsm_automatic_run+0x370>)
 8000422:	6013      	str	r3, [r2, #0]
			timeGreen = defaultTimeGreen;
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <fsm_automatic_run+0x368>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a25      	ldr	r2, [pc, #148]	; (80004c0 <fsm_automatic_run+0x374>)
 800042a:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRed--, timeGreen--);
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <fsm_automatic_run+0x370>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	4922      	ldr	r1, [pc, #136]	; (80004bc <fsm_automatic_run+0x370>)
 8000434:	600a      	str	r2, [r1, #0]
 8000436:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <fsm_automatic_run+0x374>)
 8000438:	6812      	ldr	r2, [r2, #0]
 800043a:	1e51      	subs	r1, r2, #1
 800043c:	4820      	ldr	r0, [pc, #128]	; (80004c0 <fsm_automatic_run+0x374>)
 800043e:	6001      	str	r1, [r0, #0]
 8000440:	4611      	mov	r1, r2
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fb00 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 8000448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800044c:	f000 fd86 	bl	8000f5c <setTimer2>
		}
		if(timer2_flag == 1){
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <fsm_automatic_run+0x378>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d111      	bne.n	800047c <fsm_automatic_run+0x330>
			updateClockBuffer(timeYellow--, timeRed--);
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <fsm_automatic_run+0x37c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	1e5a      	subs	r2, r3, #1
 800045e:	491a      	ldr	r1, [pc, #104]	; (80004c8 <fsm_automatic_run+0x37c>)
 8000460:	600a      	str	r2, [r1, #0]
 8000462:	4a16      	ldr	r2, [pc, #88]	; (80004bc <fsm_automatic_run+0x370>)
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	1e51      	subs	r1, r2, #1
 8000468:	4814      	ldr	r0, [pc, #80]	; (80004bc <fsm_automatic_run+0x370>)
 800046a:	6001      	str	r1, [r0, #0]
 800046c:	4611      	mov	r1, r2
 800046e:	4618      	mov	r0, r3
 8000470:	f000 faea 	bl	8000a48 <updateClockBuffer>
			setTimer2(1000);
 8000474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000478:	f000 fd70 	bl	8000f5c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 800047c:	2000      	movs	r0, #0
 800047e:	f000 faa3 	bl	80009c8 <is_button_pressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b01      	cmp	r3, #1
 8000486:	d10e      	bne.n	80004a6 <fsm_automatic_run+0x35a>
			setTimer1(250);
 8000488:	20fa      	movs	r0, #250	; 0xfa
 800048a:	f000 fd4b 	bl	8000f24 <setTimer1>
			status = MAN_MODE2;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <fsm_automatic_run+0x364>)
 8000490:	220b      	movs	r2, #11
 8000492:	601a      	str	r2, [r3, #0]
		}
		break;
 8000494:	e007      	b.n	80004a6 <fsm_automatic_run+0x35a>
	default:
		break;
 8000496:	bf00      	nop
 8000498:	e006      	b.n	80004a8 <fsm_automatic_run+0x35c>
		break;
 800049a:	bf00      	nop
 800049c:	e004      	b.n	80004a8 <fsm_automatic_run+0x35c>
		break;
 800049e:	bf00      	nop
 80004a0:	e002      	b.n	80004a8 <fsm_automatic_run+0x35c>
		break;
 80004a2:	bf00      	nop
 80004a4:	e000      	b.n	80004a8 <fsm_automatic_run+0x35c>
		break;
 80004a6:	bf00      	nop
	}
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000b8 	.word	0x200000b8
 80004b0:	20000078 	.word	0x20000078
 80004b4:	2000001c 	.word	0x2000001c
 80004b8:	20000018 	.word	0x20000018
 80004bc:	2000000c 	.word	0x2000000c
 80004c0:	20000010 	.word	0x20000010
 80004c4:	200000bc 	.word	0x200000bc
 80004c8:	20000014 	.word	0x20000014

080004cc <fsm_manual_run>:

int preTimeRed = 5;
int preTimeYellow = 2;
int preTimeGreen = 3;

void fsm_manual_run(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	switch(status){
 80004d0:	4b92      	ldr	r3, [pc, #584]	; (800071c <fsm_manual_run+0x250>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b0a      	subs	r3, #10
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	f200 811c 	bhi.w	8000714 <fsm_manual_run+0x248>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <fsm_manual_run+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	080004f5 	.word	0x080004f5
 80004e8:	0800054b 	.word	0x0800054b
 80004ec:	080005d1 	.word	0x080005d1
 80004f0:	08000655 	.word	0x08000655
	case MAN_MODE1:
		// return INIT status AUTO_RED_GREEN
		setTimer1(defaultTimeGreen*1000);
 80004f4:	4b8a      	ldr	r3, [pc, #552]	; (8000720 <fsm_manual_run+0x254>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fd0f 	bl	8000f24 <setTimer1>
		setTimer2(1000);
 8000506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050a:	f000 fd27 	bl	8000f5c <setTimer2>
		timeRed = defaultTimeRed;
 800050e:	4b85      	ldr	r3, [pc, #532]	; (8000724 <fsm_manual_run+0x258>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a85      	ldr	r2, [pc, #532]	; (8000728 <fsm_manual_run+0x25c>)
 8000514:	6013      	str	r3, [r2, #0]
		timeGreen = defaultTimeGreen;
 8000516:	4b82      	ldr	r3, [pc, #520]	; (8000720 <fsm_manual_run+0x254>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a84      	ldr	r2, [pc, #528]	; (800072c <fsm_manual_run+0x260>)
 800051c:	6013      	str	r3, [r2, #0]
		tempYellow = defaultTimeYellow;
 800051e:	4b84      	ldr	r3, [pc, #528]	; (8000730 <fsm_manual_run+0x264>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a84      	ldr	r2, [pc, #528]	; (8000734 <fsm_manual_run+0x268>)
 8000524:	6013      	str	r3, [r2, #0]
		updateClockBuffer(timeRed--, timeGreen--);
 8000526:	4b80      	ldr	r3, [pc, #512]	; (8000728 <fsm_manual_run+0x25c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	1e5a      	subs	r2, r3, #1
 800052c:	497e      	ldr	r1, [pc, #504]	; (8000728 <fsm_manual_run+0x25c>)
 800052e:	600a      	str	r2, [r1, #0]
 8000530:	4a7e      	ldr	r2, [pc, #504]	; (800072c <fsm_manual_run+0x260>)
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	1e51      	subs	r1, r2, #1
 8000536:	487d      	ldr	r0, [pc, #500]	; (800072c <fsm_manual_run+0x260>)
 8000538:	6001      	str	r1, [r0, #0]
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fa83 	bl	8000a48 <updateClockBuffer>
		status = AUTO_RED_GREEN;
 8000542:	4b76      	ldr	r3, [pc, #472]	; (800071c <fsm_manual_run+0x250>)
 8000544:	2202      	movs	r2, #2
 8000546:	601a      	str	r2, [r3, #0]
		break;
 8000548:	e0e5      	b.n	8000716 <fsm_manual_run+0x24a>
	case MAN_MODE2:
		// only red leds in both road1 and road2 are ON, other leds are OFF
//		setTrafficRed1();
//		setTrafficRed();
		// if button0 is pressed, status will move to MAN_MODE3
		if(is_button_pressed(0) == 1){
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fa3c 	bl	80009c8 <is_button_pressed>
 8000550:	4603      	mov	r3, r0
 8000552:	2b01      	cmp	r3, #1
 8000554:	d108      	bne.n	8000568 <fsm_manual_run+0x9c>
			status = MAN_MODE3;
 8000556:	4b71      	ldr	r3, [pc, #452]	; (800071c <fsm_manual_run+0x250>)
 8000558:	220c      	movs	r2, #12
 800055a:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 800055c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000560:	f000 fce0 	bl	8000f24 <setTimer1>
			setTrafficOffall();
 8000564:	f000 fdf8 	bl	8001158 <setTrafficOffall>
		}
		//blinking red led
		if(timer1_flag == 1){
 8000568:	4b73      	ldr	r3, [pc, #460]	; (8000738 <fsm_manual_run+0x26c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10c      	bne.n	800058a <fsm_manual_run+0xbe>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000570:	2120      	movs	r1, #32
 8000572:	4872      	ldr	r0, [pc, #456]	; (800073c <fsm_manual_run+0x270>)
 8000574:	f001 f955 	bl	8001822 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057c:	486f      	ldr	r0, [pc, #444]	; (800073c <fsm_manual_run+0x270>)
 800057e:	f001 f950 	bl	8001822 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000586:	f000 fccd 	bl	8000f24 <setTimer1>
		}
		//if button is pressed, tempRed value'll increase 1 unit
		//if value overcome 99, it'll return 1
		if(is_button_pressed(1) == 1){
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fa1c 	bl	80009c8 <is_button_pressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	d10b      	bne.n	80005ae <fsm_manual_run+0xe2>
			tempRed++;
 8000596:	4b6a      	ldr	r3, [pc, #424]	; (8000740 <fsm_manual_run+0x274>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	4a68      	ldr	r2, [pc, #416]	; (8000740 <fsm_manual_run+0x274>)
 800059e:	6013      	str	r3, [r2, #0]
			if(tempRed >99) tempRed = 1;
 80005a0:	4b67      	ldr	r3, [pc, #412]	; (8000740 <fsm_manual_run+0x274>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b63      	cmp	r3, #99	; 0x63
 80005a6:	dd02      	ble.n	80005ae <fsm_manual_run+0xe2>
 80005a8:	4b65      	ldr	r3, [pc, #404]	; (8000740 <fsm_manual_run+0x274>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
		}
		//if button3 is pressed, tempRed is assign for dedefaultTimeRed
		if(is_button_pressed(2) == 1){
 80005ae:	2002      	movs	r0, #2
 80005b0:	f000 fa0a 	bl	80009c8 <is_button_pressed>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d103      	bne.n	80005c2 <fsm_manual_run+0xf6>
			defaultTimeRed = tempRed ;
 80005ba:	4b61      	ldr	r3, [pc, #388]	; (8000740 <fsm_manual_run+0x274>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a59      	ldr	r2, [pc, #356]	; (8000724 <fsm_manual_run+0x258>)
 80005c0:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(2, defaultTimeRed);
 80005c2:	4b58      	ldr	r3, [pc, #352]	; (8000724 <fsm_manual_run+0x258>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 fa3d 	bl	8000a48 <updateClockBuffer>
		break;
 80005ce:	e0a2      	b.n	8000716 <fsm_manual_run+0x24a>
	case MAN_MODE3:
		// only yellow led in both road1 and road2 are ON, other led are OFF
//		setTrafficYellow();
//		setTrafficYellow1();
		// if button0 is pressed, status will move to MAN_MODE4
		if(is_button_pressed(0) == 1){
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f9f9 	bl	80009c8 <is_button_pressed>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d108      	bne.n	80005ee <fsm_manual_run+0x122>
			status = MAN_MODE4;
 80005dc:	4b4f      	ldr	r3, [pc, #316]	; (800071c <fsm_manual_run+0x250>)
 80005de:	220d      	movs	r2, #13
 80005e0:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80005e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e6:	f000 fc9d 	bl	8000f24 <setTimer1>
			setTrafficOffall();
 80005ea:	f000 fdb5 	bl	8001158 <setTrafficOffall>
		}
		//blinking yellow led
		if(timer1_flag == 1){
 80005ee:	4b52      	ldr	r3, [pc, #328]	; (8000738 <fsm_manual_run+0x26c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10b      	bne.n	800060e <fsm_manual_run+0x142>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4850      	ldr	r0, [pc, #320]	; (800073c <fsm_manual_run+0x270>)
 80005fa:	f001 f912 	bl	8001822 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80005fe:	2110      	movs	r1, #16
 8000600:	484e      	ldr	r0, [pc, #312]	; (800073c <fsm_manual_run+0x270>)
 8000602:	f001 f90e 	bl	8001822 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060a:	f000 fc8b 	bl	8000f24 <setTimer1>
		}
		//if button is pressed, tempYellow value'll increase 1 unit
		//if value overcome 99, it'll return 1
		if(is_button_pressed(1) == 1){
 800060e:	2001      	movs	r0, #1
 8000610:	f000 f9da 	bl	80009c8 <is_button_pressed>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	d10b      	bne.n	8000632 <fsm_manual_run+0x166>
			tempYellow++;
 800061a:	4b46      	ldr	r3, [pc, #280]	; (8000734 <fsm_manual_run+0x268>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a44      	ldr	r2, [pc, #272]	; (8000734 <fsm_manual_run+0x268>)
 8000622:	6013      	str	r3, [r2, #0]
			if(tempYellow > 99) tempYellow = 1;
 8000624:	4b43      	ldr	r3, [pc, #268]	; (8000734 <fsm_manual_run+0x268>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b63      	cmp	r3, #99	; 0x63
 800062a:	dd02      	ble.n	8000632 <fsm_manual_run+0x166>
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <fsm_manual_run+0x268>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
		}
		//if button3 is pressed, tempYellow is assign for dedefaultTimeYelow
		if(is_button_pressed(2) == 1){
 8000632:	2002      	movs	r0, #2
 8000634:	f000 f9c8 	bl	80009c8 <is_button_pressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d103      	bne.n	8000646 <fsm_manual_run+0x17a>
			defaultTimeYellow = tempYellow ;
 800063e:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <fsm_manual_run+0x268>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a3b      	ldr	r2, [pc, #236]	; (8000730 <fsm_manual_run+0x264>)
 8000644:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(3, defaultTimeYellow);
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <fsm_manual_run+0x264>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f9fb 	bl	8000a48 <updateClockBuffer>
		break;
 8000652:	e060      	b.n	8000716 <fsm_manual_run+0x24a>
	case MAN_MODE4:
		// if button0 is pressed, status will move to MAN_MODE1
		if(is_button_pressed(0) == 1){
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f9b7 	bl	80009c8 <is_button_pressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d126      	bne.n	80006ae <fsm_manual_run+0x1e2>
			if (defaultTimeRed < (defaultTimeGreen + defaultTimeYellow))
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <fsm_manual_run+0x254>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <fsm_manual_run+0x264>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	441a      	add	r2, r3
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <fsm_manual_run+0x258>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	429a      	cmp	r2, r3
 8000670:	dd0c      	ble.n	800068c <fsm_manual_run+0x1c0>
			{
				defaultTimeRed = preTimeRed;
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <fsm_manual_run+0x278>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a2b      	ldr	r2, [pc, #172]	; (8000724 <fsm_manual_run+0x258>)
 8000678:	6013      	str	r3, [r2, #0]
				defaultTimeYellow = preTimeYellow;
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <fsm_manual_run+0x27c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <fsm_manual_run+0x264>)
 8000680:	6013      	str	r3, [r2, #0]
				defaultTimeGreen = preTimeGreen;
 8000682:	4b32      	ldr	r3, [pc, #200]	; (800074c <fsm_manual_run+0x280>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <fsm_manual_run+0x254>)
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	e00b      	b.n	80006a4 <fsm_manual_run+0x1d8>
			}
			else
			{
				preTimeRed = defaultTimeRed;
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <fsm_manual_run+0x258>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <fsm_manual_run+0x278>)
 8000692:	6013      	str	r3, [r2, #0]
				preTimeYellow = defaultTimeYellow;
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <fsm_manual_run+0x264>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <fsm_manual_run+0x27c>)
 800069a:	6013      	str	r3, [r2, #0]
				preTimeGreen = defaultTimeGreen;
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <fsm_manual_run+0x254>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a2a      	ldr	r2, [pc, #168]	; (800074c <fsm_manual_run+0x280>)
 80006a2:	6013      	str	r3, [r2, #0]
			}
			status = MAN_MODE1;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <fsm_manual_run+0x250>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	601a      	str	r2, [r3, #0]
			setTrafficOffall();
 80006aa:	f000 fd55 	bl	8001158 <setTrafficOffall>
		}
		// only green led in both road1 and road2 are ON, other led are OFF
//		setTrafficGreen();
//		setTrafficGreen1();
		//blinking Green Led
		if(timer1_flag == 1){
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <fsm_manual_run+0x26c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d10b      	bne.n	80006ce <fsm_manual_run+0x202>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 80006b6:	2140      	movs	r1, #64	; 0x40
 80006b8:	4820      	ldr	r0, [pc, #128]	; (800073c <fsm_manual_run+0x270>)
 80006ba:	f001 f8b2 	bl	8001822 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80006be:	2108      	movs	r1, #8
 80006c0:	481e      	ldr	r0, [pc, #120]	; (800073c <fsm_manual_run+0x270>)
 80006c2:	f001 f8ae 	bl	8001822 <HAL_GPIO_TogglePin>
			setTimer1(500);
 80006c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ca:	f000 fc2b 	bl	8000f24 <setTimer1>
		}
		//if button is pressed, tempGreen value 'll increase 1 unit
		//if value overcome 99, it'll return 1
			if(is_button_pressed(1) == 1){
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 f97a 	bl	80009c8 <is_button_pressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d10b      	bne.n	80006f2 <fsm_manual_run+0x226>
				tempGreen++;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <fsm_manual_run+0x284>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <fsm_manual_run+0x284>)
 80006e2:	6013      	str	r3, [r2, #0]
				if(tempGreen > 99) tempGreen = 1;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <fsm_manual_run+0x284>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b63      	cmp	r3, #99	; 0x63
 80006ea:	dd02      	ble.n	80006f2 <fsm_manual_run+0x226>
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <fsm_manual_run+0x284>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
			}
		//if button3 is pressed, tempGreen is assign for dedefaultTimeGreen
			if(is_button_pressed(2) == 1){
 80006f2:	2002      	movs	r0, #2
 80006f4:	f000 f968 	bl	80009c8 <is_button_pressed>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d103      	bne.n	8000706 <fsm_manual_run+0x23a>
				defaultTimeGreen = tempGreen ;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <fsm_manual_run+0x284>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a07      	ldr	r2, [pc, #28]	; (8000720 <fsm_manual_run+0x254>)
 8000704:	6013      	str	r3, [r2, #0]
			}
		updateClockBuffer(4, defaultTimeGreen);
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <fsm_manual_run+0x254>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	2004      	movs	r0, #4
 800070e:	f000 f99b 	bl	8000a48 <updateClockBuffer>
		break;
 8000712:	e000      	b.n	8000716 <fsm_manual_run+0x24a>
	default:
			break;
 8000714:	bf00      	nop
	}
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000078 	.word	0x20000078
 8000720:	2000001c 	.word	0x2000001c
 8000724:	20000018 	.word	0x20000018
 8000728:	2000000c 	.word	0x2000000c
 800072c:	20000010 	.word	0x20000010
 8000730:	20000020 	.word	0x20000020
 8000734:	2000002c 	.word	0x2000002c
 8000738:	200000b8 	.word	0x200000b8
 800073c:	40010800 	.word	0x40010800
 8000740:	20000024 	.word	0x20000024
 8000744:	20000000 	.word	0x20000000
 8000748:	20000004 	.word	0x20000004
 800074c:	20000008 	.word	0x20000008
 8000750:	20000028 	.word	0x20000028

08000754 <getKeyProcess>:
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
// this function turn on button_flag
void getKeyProcess(int index){
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db07      	blt.n	8000772 <getKeyProcess+0x1e>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b02      	cmp	r3, #2
 8000766:	dc04      	bgt.n	8000772 <getKeyProcess+0x1e>
		button_flag[index] = 1;
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <getKeyProcess+0x28>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2101      	movs	r1, #1
 800076e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000098 	.word	0x20000098

08000780 <get1sFlag>:
// this function turn on flagForButtonPress1s
void get1sFlag(int index){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db07      	blt.n	800079e <get1sFlag+0x1e>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b02      	cmp	r3, #2
 8000792:	dc04      	bgt.n	800079e <get1sFlag+0x1e>
			flagForButtonPress1s[index] = 1;
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <get1sFlag+0x28>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		}
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	2000008c 	.word	0x2000008c

080007ac <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 80007b6:	4a4b      	ldr	r2, [pc, #300]	; (80008e4 <fsm_input_processing+0x138>)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d04d      	beq.n	800085e <fsm_input_processing+0xb2>
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	f300 8082 	bgt.w	80008cc <fsm_input_processing+0x120>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <fsm_input_processing+0x26>
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d037      	beq.n	8000840 <fsm_input_processing+0x94>
			buttonState[index] = BUTTON_IS_RELEASED;
			counterForButtonPress1s[index] = 0;
		}
		break;
	default:
		break;
 80007d0:	e07c      	b.n	80008cc <fsm_input_processing+0x120>
		if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 80007d2:	4a45      	ldr	r2, [pc, #276]	; (80008e8 <fsm_input_processing+0x13c>)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007da:	2b63      	cmp	r3, #99	; 0x63
 80007dc:	d81f      	bhi.n	800081e <fsm_input_processing+0x72>
			counterForButtonPress1s[index]++;
 80007de:	4a42      	ldr	r2, [pc, #264]	; (80008e8 <fsm_input_processing+0x13c>)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b299      	uxth	r1, r3
 80007ea:	4a3f      	ldr	r2, [pc, #252]	; (80008e8 <fsm_input_processing+0x13c>)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress1s[index] == DURATION_FOR_AUTO_INCREASING){
 80007f2:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <fsm_input_processing+0x13c>)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fa:	2b64      	cmp	r3, #100	; 0x64
 80007fc:	d10f      	bne.n	800081e <fsm_input_processing+0x72>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_1s;
 80007fe:	4a39      	ldr	r2, [pc, #228]	; (80008e4 <fsm_input_processing+0x138>)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	2102      	movs	r1, #2
 8000804:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress1s[index] = 0;
 8000808:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <fsm_input_processing+0x13c>)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	2100      	movs	r1, #0
 800080e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f7ff ff9e 	bl	8000754 <getKeyProcess>
				get1sFlag(index);
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	f7ff ffb1 	bl	8000780 <get1sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d152      	bne.n	80008d0 <fsm_input_processing+0x124>
			buttonState[index] = BUTTON_IS_RELEASED;
 800082a:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <fsm_input_processing+0x138>)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2101      	movs	r1, #1
 8000830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[index] = 0;
 8000834:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <fsm_input_processing+0x13c>)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2100      	movs	r1, #0
 800083a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 800083e:	e047      	b.n	80008d0 <fsm_input_processing+0x124>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d143      	bne.n	80008d4 <fsm_input_processing+0x128>
			buttonState[index] = BUTTON_IS_PRESSED;
 800084c:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <fsm_input_processing+0x138>)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2100      	movs	r1, #0
 8000852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 8000856:	6838      	ldr	r0, [r7, #0]
 8000858:	f7ff ff7c 	bl	8000754 <getKeyProcess>
		break;
 800085c:	e03a      	b.n	80008d4 <fsm_input_processing+0x128>
		if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 800085e:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <fsm_input_processing+0x13c>)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000866:	2b63      	cmp	r3, #99	; 0x63
 8000868:	d81f      	bhi.n	80008aa <fsm_input_processing+0xfe>
					counterForButtonPress1s[index]++;
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <fsm_input_processing+0x13c>)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000872:	3301      	adds	r3, #1
 8000874:	b299      	uxth	r1, r3
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <fsm_input_processing+0x13c>)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress1s[index] == DURATION_FOR_AUTO_INCREASING){
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <fsm_input_processing+0x13c>)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000886:	2b64      	cmp	r3, #100	; 0x64
 8000888:	d10f      	bne.n	80008aa <fsm_input_processing+0xfe>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_1s;
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <fsm_input_processing+0x138>)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2102      	movs	r1, #2
 8000890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress1s[index] = 0;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <fsm_input_processing+0x13c>)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2100      	movs	r1, #0
 800089a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						getKeyProcess(index);
 800089e:	6838      	ldr	r0, [r7, #0]
 80008a0:	f7ff ff58 	bl	8000754 <getKeyProcess>
						get1sFlag(index);
 80008a4:	6838      	ldr	r0, [r7, #0]
 80008a6:	f7ff ff6b 	bl	8000780 <get1sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d110      	bne.n	80008d8 <fsm_input_processing+0x12c>
			buttonState[index] = BUTTON_IS_RELEASED;
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <fsm_input_processing+0x138>)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2101      	movs	r1, #1
 80008bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[index] = 0;
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <fsm_input_processing+0x13c>)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	2100      	movs	r1, #0
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 80008ca:	e005      	b.n	80008d8 <fsm_input_processing+0x12c>
		break;
 80008cc:	bf00      	nop
 80008ce:	e004      	b.n	80008da <fsm_input_processing+0x12e>
		break;
 80008d0:	bf00      	nop
 80008d2:	e002      	b.n	80008da <fsm_input_processing+0x12e>
		break;
 80008d4:	bf00      	nop
 80008d6:	e000      	b.n	80008da <fsm_input_processing+0x12e>
		break;
 80008d8:	bf00      	nop
	}
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000030 	.word	0x20000030
 80008e8:	20000090 	.word	0x20000090

080008ec <button_reading>:
void button_reading(void){
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 80008f2:	2300      	movs	r3, #0
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	e055      	b.n	80009a4 <button_reading+0xb8>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	492d      	ldr	r1, [pc, #180]	; (80009b4 <button_reading+0xc8>)
 80008fe:	5c89      	ldrb	r1, [r1, r2]
 8000900:	4a2d      	ldr	r2, [pc, #180]	; (80009b8 <button_reading+0xcc>)
 8000902:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	492c      	ldr	r1, [pc, #176]	; (80009bc <button_reading+0xd0>)
 800090a:	5c89      	ldrb	r1, [r1, r2]
 800090c:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <button_reading+0xc8>)
 800090e:	54d1      	strb	r1, [r2, r3]
		// Choosing Which button is pressed.
		switch(i){
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d01c      	beq.n	8000950 <button_reading+0x64>
 8000916:	2b02      	cmp	r3, #2
 8000918:	dc25      	bgt.n	8000966 <button_reading+0x7a>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <button_reading+0x38>
 800091e:	2b01      	cmp	r3, #1
 8000920:	d00b      	beq.n	800093a <button_reading+0x4e>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
			break;
		default:
			break;
 8000922:	e020      	b.n	8000966 <button_reading+0x7a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000924:	79fc      	ldrb	r4, [r7, #7]
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	4825      	ldr	r0, [pc, #148]	; (80009c0 <button_reading+0xd4>)
 800092c:	f000 ff4a 	bl	80017c4 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <button_reading+0xd0>)
 8000936:	551a      	strb	r2, [r3, r4]
			break;
 8000938:	e016      	b.n	8000968 <button_reading+0x7c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800093a:	79fc      	ldrb	r4, [r7, #7]
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	481f      	ldr	r0, [pc, #124]	; (80009c0 <button_reading+0xd4>)
 8000942:	f000 ff3f 	bl	80017c4 <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <button_reading+0xd0>)
 800094c:	551a      	strb	r2, [r3, r4]
			break;
 800094e:	e00b      	b.n	8000968 <button_reading+0x7c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000950:	79fc      	ldrb	r4, [r7, #7]
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	481a      	ldr	r0, [pc, #104]	; (80009c0 <button_reading+0xd4>)
 8000958:	f000 ff34 	bl	80017c4 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <button_reading+0xd0>)
 8000962:	551a      	strb	r2, [r3, r4]
			break;
 8000964:	e000      	b.n	8000968 <button_reading+0x7c>
			break;
 8000966:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <button_reading+0xcc>)
 800096c:	5cd2      	ldrb	r2, [r2, r3]
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4910      	ldr	r1, [pc, #64]	; (80009b4 <button_reading+0xc8>)
 8000972:	5ccb      	ldrb	r3, [r1, r3]
 8000974:	429a      	cmp	r2, r3
 8000976:	d112      	bne.n	800099e <button_reading+0xb2>
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <button_reading+0xc8>)
 800097c:	5cd2      	ldrb	r2, [r2, r3]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	490e      	ldr	r1, [pc, #56]	; (80009bc <button_reading+0xd0>)
 8000982:	5ccb      	ldrb	r3, [r1, r3]
 8000984:	429a      	cmp	r2, r3
 8000986:	d10a      	bne.n	800099e <button_reading+0xb2>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	490a      	ldr	r1, [pc, #40]	; (80009b8 <button_reading+0xcc>)
 800098e:	5c89      	ldrb	r1, [r1, r2]
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <button_reading+0xd8>)
 8000992:	54d1      	strb	r1, [r2, r3]
			//call fsm_input_processing() function
			fsm_input_processing(buttonBuffer,i);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4619      	mov	r1, r3
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <button_reading+0xd8>)
 800099a:	f7ff ff07 	bl	80007ac <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	3301      	adds	r3, #1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d9a6      	bls.n	80008f8 <button_reading+0xc>
		}

	}
}
 80009aa:	bf00      	nop
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	20000084 	.word	0x20000084
 80009b8:	20000088 	.word	0x20000088
 80009bc:	20000080 	.word	0x20000080
 80009c0:	40010800 	.word	0x40010800
 80009c4:	2000007c 	.word	0x2000007c

080009c8 <is_button_pressed>:
//determine whether a button is pressed or not
int is_button_pressed(uint8_t index){
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d901      	bls.n	80009dc <is_button_pressed+0x14>
 80009d8:	2300      	movs	r3, #0
 80009da:	e00d      	b.n	80009f8 <is_button_pressed+0x30>
	if(button_flag[index] == 1){
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <is_button_pressed+0x3c>)
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d106      	bne.n	80009f6 <is_button_pressed+0x2e>
		//set button flag value = 0
		button_flag[index] = 0;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <is_button_pressed+0x3c>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e000      	b.n	80009f8 <is_button_pressed+0x30>
	}
	return 0;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000098 	.word	0x20000098

08000a08 <display7SEG>:

uint16_t led_matrix[MAX_MATRIX] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7D, 0x07, 0x7F, 0x6f};
int index_led = 0;
int led_buffer[MAX_BUFF] = {0,0,0,0};
//display LED 7 segment
void display7SEG(int number){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	uint16_t bit_var = led_matrix[number];
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <display7SEG+0x38>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a18:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, bit_var, RESET);
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <display7SEG+0x3c>)
 8000a22:	f000 fee6 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ~bit_var, SET);
 8000a26:	89fb      	ldrh	r3, [r7, #14]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <display7SEG+0x3c>)
 8000a32:	f000 fede 	bl	80017f2 <HAL_GPIO_WritePin>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000003c 	.word	0x2000003c
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <updateClockBuffer>:
//if counter1 < 10, example value = 2, led7 1 display 0 and led 7 segment 2 display 2
//if counter1 > 10, ex value = 12, led7 1 display 1 and led 7 segment 2 display 2
void updateClockBuffer(int counter1, int counter2){
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	    led_buffer[0] = counter1 / 10;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <updateClockBuffer+0x70>)
 8000a56:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5a:	1092      	asrs	r2, r2, #2
 8000a5c:	17db      	asrs	r3, r3, #31
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <updateClockBuffer+0x74>)
 8000a62:	6013      	str	r3, [r2, #0]
		led_buffer[1] = counter1 % 10;
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <updateClockBuffer+0x70>)
 8000a68:	fb83 2301 	smull	r2, r3, r3, r1
 8000a6c:	109a      	asrs	r2, r3, #2
 8000a6e:	17cb      	asrs	r3, r1, #31
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	1aca      	subs	r2, r1, r3
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <updateClockBuffer+0x74>)
 8000a7e:	605a      	str	r2, [r3, #4]
		led_buffer[2] = counter2 / 10;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <updateClockBuffer+0x70>)
 8000a84:	fb82 1203 	smull	r1, r2, r2, r3
 8000a88:	1092      	asrs	r2, r2, #2
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <updateClockBuffer+0x74>)
 8000a90:	6093      	str	r3, [r2, #8]
		led_buffer[3] = counter2 % 10;
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <updateClockBuffer+0x70>)
 8000a96:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9a:	109a      	asrs	r2, r3, #2
 8000a9c:	17cb      	asrs	r3, r1, #31
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	1aca      	subs	r2, r1, r3
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <updateClockBuffer+0x74>)
 8000aac:	60da      	str	r2, [r3, #12]
 }
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	66666667 	.word	0x66666667
 8000abc:	200000a8 	.word	0x200000a8

08000ac0 <update7SEG>:
// show which led 7 segment is ON and the value it display
void update7SEG(int index){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d852      	bhi.n	8000b74 <update7SEG+0xb4>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <update7SEG+0x14>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000b09 	.word	0x08000b09
 8000adc:	08000b2d 	.word	0x08000b2d
 8000ae0:	08000b51 	.word	0x08000b51
	switch(index){
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aea:	4825      	ldr	r0, [pc, #148]	; (8000b80 <update7SEG+0xc0>)
 8000aec:	f000 fe81 	bl	80017f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000af6:	4822      	ldr	r0, [pc, #136]	; (8000b80 <update7SEG+0xc0>)
 8000af8:	f000 fe7b 	bl	80017f2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <update7SEG+0xc4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff81 	bl	8000a08 <display7SEG>
		break;
 8000b06:	e036      	b.n	8000b76 <update7SEG+0xb6>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0e:	481c      	ldr	r0, [pc, #112]	; (8000b80 <update7SEG+0xc0>)
 8000b10:	f000 fe6f 	bl	80017f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000b1a:	4819      	ldr	r0, [pc, #100]	; (8000b80 <update7SEG+0xc0>)
 8000b1c:	f000 fe69 	bl	80017f2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <update7SEG+0xc4>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff6f 	bl	8000a08 <display7SEG>
		break;
 8000b2a:	e024      	b.n	8000b76 <update7SEG+0xb6>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <update7SEG+0xc0>)
 8000b34:	f000 fe5d 	bl	80017f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000b3e:	4810      	ldr	r0, [pc, #64]	; (8000b80 <update7SEG+0xc0>)
 8000b40:	f000 fe57 	bl	80017f2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <update7SEG+0xc4>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff5d 	bl	8000a08 <display7SEG>
		break;
 8000b4e:	e012      	b.n	8000b76 <update7SEG+0xb6>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <update7SEG+0xc0>)
 8000b58:	f000 fe4b 	bl	80017f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin| EN1_Pin | EN2_Pin , SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <update7SEG+0xc0>)
 8000b64:	f000 fe45 	bl	80017f2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <update7SEG+0xc4>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff4b 	bl	8000a08 <display7SEG>
		break;
 8000b72:	e000      	b.n	8000b76 <update7SEG+0xb6>
	default:
		break;
 8000b74:	bf00      	nop
	}
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010800 	.word	0x40010800
 8000b84:	200000a8 	.word	0x200000a8

08000b88 <scanLed>:
// display time value in LED 7 SEGMENT
void scanLed(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <scanLed+0x34>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d111      	bne.n	8000bb8 <scanLed+0x30>
		update7SEG(index_led++);
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <scanLed+0x38>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	4909      	ldr	r1, [pc, #36]	; (8000bc0 <scanLed+0x38>)
 8000b9c:	600a      	str	r2, [r1, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff8e 	bl	8000ac0 <update7SEG>
		if(index_led > 3) index_led = 0;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <scanLed+0x38>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	dd02      	ble.n	8000bb2 <scanLed+0x2a>
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <scanLed+0x38>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		setTimer3(250);
 8000bb2:	20fa      	movs	r0, #250	; 0xfa
 8000bb4:	f000 f9ee 	bl	8000f94 <setTimer3>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000c0 	.word	0x200000c0
 8000bc0:	200000a4 	.word	0x200000a4

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc8:	f000 fb12 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bcc:	f000 f818 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd0:	f000 f89e 	bl	8000d10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bd4:	f000 f850 	bl	8000c78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <main+0x34>)
 8000bda:	f001 fa67 	bl	80020ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <main+0x38>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
  setTimer3(100);
 8000be4:	2064      	movs	r0, #100	; 0x64
 8000be6:	f000 f9d5 	bl	8000f94 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 8000bea:	f7ff faaf 	bl	800014c <fsm_automatic_run>
	  fsm_manual_run();
 8000bee:	f7ff fc6d 	bl	80004cc <fsm_manual_run>
	  scanLed();
 8000bf2:	f7ff ffc9 	bl	8000b88 <scanLed>
	  fsm_automatic_run();
 8000bf6:	e7f8      	b.n	8000bea <main+0x26>
 8000bf8:	200000d0 	.word	0x200000d0
 8000bfc:	20000078 	.word	0x20000078

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fdfc 	bl	800280c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fe0c 	bl	8001854 <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c42:	f000 f8c9 	bl	8000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 f878 	bl	8001d54 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 f8b5 	bl	8000dd8 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	; 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000c9e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cac:	2209      	movs	r2, #9
 8000cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cbe:	f001 f9a5 	bl	800200c <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cc8:	f000 f886 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cda:	f001 fb23 	bl	8002324 <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ce4:	f000 f878 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cf6:	f001 fcfb 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d00:	f000 f86a 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000d0 	.word	0x200000d0

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a28      	ldr	r2, [pc, #160]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CHECK_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin
 8000d54:	2200      	movs	r2, #0
 8000d56:	f24f 11fc 	movw	r1, #61948	; 0xf1fc
 8000d5a:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d5c:	f000 fd49 	bl	80017f2 <HAL_GPIO_WritePin>
                          |LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8000d60:	2200      	movs	r2, #0
 8000d62:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000d66:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <MX_GPIO_Init+0xc4>)
 8000d68:	f000 fd43 	bl	80017f2 <HAL_GPIO_WritePin>
                          |SEG8_Pin|SEG9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_CHECK_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin
                           LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED1_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_CHECK_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin
 8000d6c:	f24f 13fc 	movw	r3, #61948	; 0xf1fc
 8000d70:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d86:	f000 fba3 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin
                           SEG8_Pin SEG9_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8000d8a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000d8e:	60bb      	str	r3, [r7, #8]
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_GPIO_Init+0xc4>)
 8000da4:	f000 fb94 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000da8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000dbe:	f000 fb87 	bl	80014d0 <HAL_GPIO_Init>

}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_MspInit+0x5c>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <HAL_MspInit+0x5c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x5c>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_MspInit+0x60>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_MspInit+0x60>)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e58:	d113      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_TIM_Base_MspInit+0x44>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_TIM_Base_MspInit+0x44>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_TIM_Base_MspInit+0x44>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	201c      	movs	r0, #28
 8000e78:	f000 faf3 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e7c:	201c      	movs	r0, #28
 8000e7e:	f000 fb0c 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f9d1 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM2_IRQHandler+0x10>)
 8000ee6:	f001 f92d 	bl	8002144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000d0 	.word	0x200000d0

08000ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_TIM_PeriodElapsedCallback>:
#include "timer.h"

#define Timer_Cycle 10

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d101      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8000f12:	f7ff fceb 	bl	80008ec <button_reading>
	}
	timer_run();
 8000f16:	f000 f859 	bl	8000fcc <timer_run>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <setTimer1>:

int timer1_counter = 0;
int timer2_counter = 0;
int timer3_counter = 0;

void setTimer1(int duration){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/Timer_Cycle;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <setTimer1+0x2c>)
 8000f30:	fb82 1203 	smull	r1, r2, r2, r3
 8000f34:	1092      	asrs	r2, r2, #2
 8000f36:	17db      	asrs	r3, r3, #31
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <setTimer1+0x30>)
 8000f3c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <setTimer1+0x34>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	66666667 	.word	0x66666667
 8000f54:	200000c4 	.word	0x200000c4
 8000f58:	200000b8 	.word	0x200000b8

08000f5c <setTimer2>:
void setTimer2(int duration){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/Timer_Cycle;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <setTimer2+0x2c>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	1092      	asrs	r2, r2, #2
 8000f6e:	17db      	asrs	r3, r3, #31
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <setTimer2+0x30>)
 8000f74:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <setTimer2+0x34>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	66666667 	.word	0x66666667
 8000f8c:	200000c8 	.word	0x200000c8
 8000f90:	200000bc 	.word	0x200000bc

08000f94 <setTimer3>:
void setTimer3(int duration){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/Timer_Cycle;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <setTimer3+0x2c>)
 8000fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa4:	1092      	asrs	r2, r2, #2
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <setTimer3+0x30>)
 8000fac:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <setTimer3+0x34>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	66666667 	.word	0x66666667
 8000fc4:	200000cc 	.word	0x200000cc
 8000fc8:	200000c0 	.word	0x200000c0

08000fcc <timer_run>:
void timer_run(){
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <timer_run+0x6c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd0b      	ble.n	8000ff0 <timer_run+0x24>
		timer1_counter--;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <timer_run+0x6c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <timer_run+0x6c>)
 8000fe0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <timer_run+0x6c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <timer_run+0x24>
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <timer_run+0x70>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <timer_run+0x74>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dd0b      	ble.n	8001010 <timer_run+0x44>
			timer2_counter--;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <timer_run+0x74>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <timer_run+0x74>)
 8001000:	6013      	str	r3, [r2, #0]
			if(timer2_counter == 0) timer2_flag = 1;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <timer_run+0x74>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <timer_run+0x44>
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <timer_run+0x78>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
		}
	if(timer3_counter > 0){
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <timer_run+0x7c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd0b      	ble.n	8001030 <timer_run+0x64>
				timer3_counter--;
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <timer_run+0x7c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <timer_run+0x7c>)
 8001020:	6013      	str	r3, [r2, #0]
				if(timer3_counter == 0) timer3_flag = 1;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <timer_run+0x7c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <timer_run+0x64>
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <timer_run+0x80>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
		}
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	200000c4 	.word	0x200000c4
 800103c:	200000b8 	.word	0x200000b8
 8001040:	200000c8 	.word	0x200000c8
 8001044:	200000bc 	.word	0x200000bc
 8001048:	200000cc 	.word	0x200000cc
 800104c:	200000c0 	.word	0x200000c0

08001050 <setTrafficRed>:
 *      Author: ADMIN
 */

#include "traffic.h"

void setTrafficRed(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2120      	movs	r1, #32
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <setTrafficRed+0x28>)
 800105a:	f000 fbca 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2108      	movs	r1, #8
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <setTrafficRed+0x28>)
 8001064:	f000 fbc5 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2110      	movs	r1, #16
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <setTrafficRed+0x28>)
 800106e:	f000 fbc0 	bl	80017f2 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010800 	.word	0x40010800

0800107c <setTrafficGreen>:
void setTrafficGreen(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2120      	movs	r1, #32
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <setTrafficGreen+0x28>)
 8001086:	f000 fbb4 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2108      	movs	r1, #8
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <setTrafficGreen+0x28>)
 8001090:	f000 fbaf 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <setTrafficGreen+0x28>)
 800109a:	f000 fbaa 	bl	80017f2 <HAL_GPIO_WritePin>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40010800 	.word	0x40010800

080010a8 <setTrafficYellow>:
void setTrafficYellow(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <setTrafficYellow+0x28>)
 80010b2:	f000 fb9e 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2108      	movs	r1, #8
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <setTrafficYellow+0x28>)
 80010bc:	f000 fb99 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2110      	movs	r1, #16
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <setTrafficYellow+0x28>)
 80010c6:	f000 fb94 	bl	80017f2 <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010800 	.word	0x40010800

080010d4 <setTrafficRed1>:
void setTrafficRed1(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <setTrafficRed1+0x28>)
 80010e0:	f000 fb87 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <setTrafficRed1+0x28>)
 80010ea:	f000 fb82 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <setTrafficRed1+0x28>)
 80010f4:	f000 fb7d 	bl	80017f2 <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010800 	.word	0x40010800

08001100 <setTrafficGreen1>:
void setTrafficGreen1(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <setTrafficGreen1+0x28>)
 800110c:	f000 fb71 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <setTrafficGreen1+0x28>)
 8001116:	f000 fb6c 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4802      	ldr	r0, [pc, #8]	; (8001128 <setTrafficGreen1+0x28>)
 8001120:	f000 fb67 	bl	80017f2 <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40010800 	.word	0x40010800

0800112c <setTrafficYellow1>:
void setTrafficYellow1(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <setTrafficYellow1+0x28>)
 8001138:	f000 fb5b 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2140      	movs	r1, #64	; 0x40
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <setTrafficYellow1+0x28>)
 8001142:	f000 fb56 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	4802      	ldr	r0, [pc, #8]	; (8001154 <setTrafficYellow1+0x28>)
 800114c:	f000 fb51 	bl	80017f2 <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40010800 	.word	0x40010800

08001158 <setTrafficOffall>:
void setTrafficOffall(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	480f      	ldr	r0, [pc, #60]	; (80011a0 <setTrafficOffall+0x48>)
 8001162:	f000 fb46 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2108      	movs	r1, #8
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <setTrafficOffall+0x48>)
 800116c:	f000 fb41 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2110      	movs	r1, #16
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <setTrafficOffall+0x48>)
 8001176:	f000 fb3c 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <setTrafficOffall+0x48>)
 8001182:	f000 fb36 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2140      	movs	r1, #64	; 0x40
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <setTrafficOffall+0x48>)
 800118c:	f000 fb31 	bl	80017f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <setTrafficOffall+0x48>)
 8001196:	f000 fb2c 	bl	80017f2 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800

080011a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a4:	f7ff fea6 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011aa:	490c      	ldr	r1, [pc, #48]	; (80011dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c0:	4c09      	ldr	r4, [pc, #36]	; (80011e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f001 faf9 	bl	80027c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d2:	f7ff fcf7 	bl	8000bc4 <main>
  bx lr
 80011d6:	4770      	bx	lr
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011e0:	08002860 	.word	0x08002860
  ldr r2, =_sbss
 80011e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011e8:	2000011c 	.word	0x2000011c

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x28>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x28>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f923 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fdea 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f93b 	bl	80014b6 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f903 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000050 	.word	0x20000050
 8001274:	20000058 	.word	0x20000058
 8001278:	20000054 	.word	0x20000054

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <HAL_IncTick+0x20>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	20000058 	.word	0x20000058
 800129c:	20000118 	.word	0x20000118

080012a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <HAL_GetTick+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000118 	.word	0x20000118

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <__NVIC_EnableIRQ+0x34>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff90 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff2d 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff42 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff35 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b08b      	sub	sp, #44	; 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e148      	b.n	8001776 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e4:	2201      	movs	r2, #1
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8137 	bne.w	8001770 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4aa3      	ldr	r2, [pc, #652]	; (8001794 <HAL_GPIO_Init+0x2c4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d05e      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800150c:	4aa1      	ldr	r2, [pc, #644]	; (8001794 <HAL_GPIO_Init+0x2c4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d875      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001512:	4aa1      	ldr	r2, [pc, #644]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d058      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001518:	4a9f      	ldr	r2, [pc, #636]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d86f      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800151e:	4a9f      	ldr	r2, [pc, #636]	; (800179c <HAL_GPIO_Init+0x2cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d052      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001524:	4a9d      	ldr	r2, [pc, #628]	; (800179c <HAL_GPIO_Init+0x2cc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d869      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800152a:	4a9d      	ldr	r2, [pc, #628]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04c      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001530:	4a9b      	ldr	r2, [pc, #620]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d863      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001536:	4a9b      	ldr	r2, [pc, #620]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d046      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800153c:	4a99      	ldr	r2, [pc, #612]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d85d      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d82a      	bhi.n	800159c <HAL_GPIO_Init+0xcc>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d859      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <HAL_GPIO_Init+0x80>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	080015cb 	.word	0x080015cb
 8001554:	080015a5 	.word	0x080015a5
 8001558:	080015b7 	.word	0x080015b7
 800155c:	080015f9 	.word	0x080015f9
 8001560:	080015ff 	.word	0x080015ff
 8001564:	080015ff 	.word	0x080015ff
 8001568:	080015ff 	.word	0x080015ff
 800156c:	080015ff 	.word	0x080015ff
 8001570:	080015ff 	.word	0x080015ff
 8001574:	080015ff 	.word	0x080015ff
 8001578:	080015ff 	.word	0x080015ff
 800157c:	080015ff 	.word	0x080015ff
 8001580:	080015ff 	.word	0x080015ff
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015ff 	.word	0x080015ff
 800158c:	080015ff 	.word	0x080015ff
 8001590:	080015ff 	.word	0x080015ff
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015c1 	.word	0x080015c1
 800159c:	4a82      	ldr	r2, [pc, #520]	; (80017a8 <HAL_GPIO_Init+0x2d8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a2:	e02c      	b.n	80015fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e029      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	3304      	adds	r3, #4
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e024      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	3308      	adds	r3, #8
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e01f      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	330c      	adds	r3, #12
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e01a      	b.n	8001600 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d2:	2304      	movs	r3, #4
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e013      	b.n	8001600 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	611a      	str	r2, [r3, #16]
          break;
 80015ea:	e009      	b.n	8001600 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	615a      	str	r2, [r3, #20]
          break;
 80015f6:	e003      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x130>
          break;
 80015fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d801      	bhi.n	800160a <HAL_GPIO_Init+0x13a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e001      	b.n	800160e <HAL_GPIO_Init+0x13e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d802      	bhi.n	800161c <HAL_GPIO_Init+0x14c>
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x152>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	3b08      	subs	r3, #8
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	210f      	movs	r1, #15
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8090 	beq.w	8001770 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001650:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a55      	ldr	r2, [pc, #340]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001668:	4a51      	ldr	r2, [pc, #324]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <HAL_GPIO_Init+0x2e4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_GPIO_Init+0x1e0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a48      	ldr	r2, [pc, #288]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a47      	ldr	r2, [pc, #284]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_GPIO_Init+0x1d8>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e004      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016b0:	2300      	movs	r3, #0
 80016b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b4:	f002 0203 	and.w	r2, r2, #3
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	4093      	lsls	r3, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c2:	493b      	ldr	r1, [pc, #236]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016dc:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4937      	ldr	r1, [pc, #220]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4933      	ldr	r1, [pc, #204]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001704:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	492d      	ldr	r1, [pc, #180]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	4929      	ldr	r1, [pc, #164]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 800171c:	4013      	ands	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4923      	ldr	r1, [pc, #140]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	491f      	ldr	r1, [pc, #124]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 8001744:	4013      	ands	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4919      	ldr	r1, [pc, #100]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4915      	ldr	r1, [pc, #84]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 800176c:	4013      	ands	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	3301      	adds	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	f47f aeaf 	bne.w	80014e4 <HAL_GPIO_Init+0x14>
  }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	372c      	adds	r7, #44	; 0x2c
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	10320000 	.word	0x10320000
 8001798:	10310000 	.word	0x10310000
 800179c:	10220000 	.word	0x10220000
 80017a0:	10210000 	.word	0x10210000
 80017a4:	10120000 	.word	0x10120000
 80017a8:	10110000 	.word	0x10110000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40010800 	.word	0x40010800
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	40011000 	.word	0x40011000
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e001      	b.n	80017e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	807b      	strh	r3, [r7, #2]
 80017fe:	4613      	mov	r3, r2
 8001800:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001802:	787b      	ldrb	r3, [r7, #1]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800180e:	e003      	b.n	8001818 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	041a      	lsls	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	611a      	str	r2, [r3, #16]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001834:	887a      	ldrh	r2, [r7, #2]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	041a      	lsls	r2, r3, #16
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43d9      	mvns	r1, r3
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	400b      	ands	r3, r1
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e26c      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8087 	beq.w	8001982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001874:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00c      	beq.n	800189a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d112      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
 800188c:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d10b      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d06c      	beq.n	8001980 <HAL_RCC_OscConfig+0x12c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d168      	bne.n	8001980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e246      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x76>
 80018bc:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e02e      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0xbc>
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 8001910:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a67      	ldr	r2, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fcb6 	bl	80012a0 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fcb2 	bl	80012a0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1fa      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xe4>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fca2 	bl	80012a0 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fc9e 	bl	80012a0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1e6      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x10c>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1ba      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4939      	ldr	r1, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fc57 	bl	80012a0 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fc53 	bl	80012a0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e19b      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc36 	bl	80012a0 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff fc32 	bl	80012a0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e17a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d03a      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fc16 	bl	80012a0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fc12 	bl	80012a0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e15a      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 fa9a 	bl	8001fd0 <RCC_Delay>
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fbfc 	bl	80012a0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aaa:	e00f      	b.n	8001acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fbf8 	bl	80012a0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d908      	bls.n	8001acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e140      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	42420000 	.word	0x42420000
 8001ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e9      	bne.n	8001aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a6 	beq.w	8001c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b97      	ldr	r3, [pc, #604]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b94      	ldr	r3, [pc, #592]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a93      	ldr	r2, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a8a      	ldr	r2, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fbb9 	bl	80012a0 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fbb5 	bl	80012a0 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0fd      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x334>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a72      	ldr	r2, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	e01c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x356>
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a6c      	ldr	r2, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a63      	ldr	r2, [pc, #396]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d015      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fb69 	bl	80012a0 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fb65 	bl	80012a0 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0ab      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ee      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb53 	bl	80012a0 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fb4f 	bl	80012a0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e095      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8081 	beq.w	8001d3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d061      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d146      	bne.n	8001cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb23 	bl	80012a0 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fb1f 	bl	80012a0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e067      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	492d      	ldr	r1, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a19      	ldr	r1, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff faf3 	bl	80012a0 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff faef 	bl	80012a0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e037      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
 8001cdc:	e02f      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_RCC_OscConfig+0x4fc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fadc 	bl	80012a0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff fad8 	bl	80012a0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e020      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x498>
 8001d0a:	e018      	b.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420060 	.word	0x42420060

08001d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0d0      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4965      	ldr	r1, [pc, #404]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b8      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	494d      	ldr	r1, [pc, #308]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d040      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d115      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e073      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06b      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4936      	ldr	r1, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e44:	f7ff fa2c 	bl	80012a0 <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff fa28 	bl	80012a0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e053      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d210      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e032      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4916      	ldr	r1, [pc, #88]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee2:	f000 f821 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	490a      	ldr	r1, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	5ccb      	ldrb	r3, [r1, r3]
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1cc>)
 8001efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f98a 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08002834 	.word	0x08002834
 8001f20:	20000050 	.word	0x20000050
 8001f24:	20000054 	.word	0x20000054

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x30>
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x36>
 8001f56:	e027      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5a:	613b      	str	r3, [r7, #16]
      break;
 8001f5c:	e027      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	0c9b      	lsrs	r3, r3, #18
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f68:	5cd3      	ldrb	r3, [r2, r3]
 8001f6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d010      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0c5b      	lsrs	r3, r3, #17
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8a:	fb02 f203 	mul.w	r2, r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e004      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f9c:	fb02 f303 	mul.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	613b      	str	r3, [r7, #16]
      break;
 8001fa6:	e002      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001faa:	613b      	str	r3, [r7, #16]
      break;
 8001fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fae:	693b      	ldr	r3, [r7, #16]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	007a1200 	.word	0x007a1200
 8001fc4:	08002844 	.word	0x08002844
 8001fc8:	08002854 	.word	0x08002854
 8001fcc:	003d0900 	.word	0x003d0900

08001fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <RCC_Delay+0x34>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <RCC_Delay+0x38>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a5b      	lsrs	r3, r3, #9
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fec:	bf00      	nop
  }
  while (Delay --);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	60fa      	str	r2, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f9      	bne.n	8001fec <RCC_Delay+0x1c>
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000050 	.word	0x20000050
 8002008:	10624dd3 	.word	0x10624dd3

0800200c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e041      	b.n	80020a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe ff08 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f000 fa56 	bl	80024fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d001      	beq.n	80020c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e035      	b.n	8002130 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_TIM_Base_Start_IT+0x90>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_TIM_Base_Start_IT+0x4e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ee:	d004      	beq.n	80020fa <HAL_TIM_Base_Start_IT+0x4e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_TIM_Base_Start_IT+0x94>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d111      	bne.n	800211e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d010      	beq.n	800212e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	e007      	b.n	800212e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40000400 	.word	0x40000400

08002144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d020      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0202 	mvn.w	r2, #2
 8002178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f998 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f98b 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f99a 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d020      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0204 	mvn.w	r2, #4
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f972 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f965 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f974 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d020      	beq.n	8002240 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0208 	mvn.w	r2, #8
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f94c 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f93f 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f94e 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d020      	beq.n	800228c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2208      	movs	r2, #8
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f926 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f919 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f928 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0201 	mvn.w	r2, #1
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fe28 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa6f 	bl	80027b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8f8 	bl	80024e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00c      	beq.n	800231c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0220 	mvn.w	r2, #32
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa42 	bl	80027a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_TIM_ConfigClockSource+0x1c>
 800233c:	2302      	movs	r3, #2
 800233e:	e0b4      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x186>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800235e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002378:	d03e      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0xd4>
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237e:	f200 8087 	bhi.w	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002386:	f000 8086 	beq.w	8002496 <HAL_TIM_ConfigClockSource+0x172>
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	d87f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b70      	cmp	r3, #112	; 0x70
 8002392:	d01a      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0xa6>
 8002394:	2b70      	cmp	r3, #112	; 0x70
 8002396:	d87b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b60      	cmp	r3, #96	; 0x60
 800239a:	d050      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x11a>
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d877      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b50      	cmp	r3, #80	; 0x50
 80023a2:	d03c      	beq.n	800241e <HAL_TIM_ConfigClockSource+0xfa>
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d873      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d058      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x13a>
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d86f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d064      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	2b30      	cmp	r3, #48	; 0x30
 80023b6:	d86b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d060      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d867      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05c      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d05a      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023c8:	e062      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f000 f96a 	bl	80026b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	609a      	str	r2, [r3, #8]
      break;
 80023f6:	e04f      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f000 f953 	bl	80026b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800241a:	609a      	str	r2, [r3, #8]
      break;
 800241c:	e03c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	461a      	mov	r2, r3
 800242c:	f000 f8ca 	bl	80025c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2150      	movs	r1, #80	; 0x50
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f921 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800243c:	e02c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	f000 f8e8 	bl	8002620 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2160      	movs	r1, #96	; 0x60
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f911 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800245c:	e01c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	f000 f8aa 	bl	80025c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2140      	movs	r1, #64	; 0x40
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f901 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800247c:	e00c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f000 f8f8 	bl	800267e <TIM_ITRx_SetConfig>
      break;
 800248e:	e003      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e000      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <TIM_Base_SetConfig+0xc0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d007      	beq.n	8002524 <TIM_Base_SetConfig+0x28>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d003      	beq.n	8002524 <TIM_Base_SetConfig+0x28>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <TIM_Base_SetConfig+0xc4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d108      	bne.n	8002536 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a20      	ldr	r2, [pc, #128]	; (80025bc <TIM_Base_SetConfig+0xc0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <TIM_Base_SetConfig+0x52>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d003      	beq.n	800254e <TIM_Base_SetConfig+0x52>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <TIM_Base_SetConfig+0xc4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d108      	bne.n	8002560 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <TIM_Base_SetConfig+0xc0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d103      	bne.n	8002594 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f023 0201 	bic.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]
  }
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400

080025c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f023 0201 	bic.w	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f023 030a 	bic.w	r3, r3, #10
 8002600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	621a      	str	r2, [r3, #32]
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800264a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	031b      	lsls	r3, r3, #12
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800265c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	621a      	str	r2, [r3, #32]
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	f043 0307 	orr.w	r3, r3, #7
 80026a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b087      	sub	sp, #28
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4313      	orrs	r3, r2
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002704:	2302      	movs	r3, #2
 8002706:	e041      	b.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d004      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10c      	bne.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40000400 	.word	0x40000400

080027a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <__libc_init_array>:
 80027c4:	b570      	push	{r4, r5, r6, lr}
 80027c6:	2600      	movs	r6, #0
 80027c8:	4d0c      	ldr	r5, [pc, #48]	; (80027fc <__libc_init_array+0x38>)
 80027ca:	4c0d      	ldr	r4, [pc, #52]	; (8002800 <__libc_init_array+0x3c>)
 80027cc:	1b64      	subs	r4, r4, r5
 80027ce:	10a4      	asrs	r4, r4, #2
 80027d0:	42a6      	cmp	r6, r4
 80027d2:	d109      	bne.n	80027e8 <__libc_init_array+0x24>
 80027d4:	f000 f822 	bl	800281c <_init>
 80027d8:	2600      	movs	r6, #0
 80027da:	4d0a      	ldr	r5, [pc, #40]	; (8002804 <__libc_init_array+0x40>)
 80027dc:	4c0a      	ldr	r4, [pc, #40]	; (8002808 <__libc_init_array+0x44>)
 80027de:	1b64      	subs	r4, r4, r5
 80027e0:	10a4      	asrs	r4, r4, #2
 80027e2:	42a6      	cmp	r6, r4
 80027e4:	d105      	bne.n	80027f2 <__libc_init_array+0x2e>
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
 80027e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ec:	4798      	blx	r3
 80027ee:	3601      	adds	r6, #1
 80027f0:	e7ee      	b.n	80027d0 <__libc_init_array+0xc>
 80027f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f6:	4798      	blx	r3
 80027f8:	3601      	adds	r6, #1
 80027fa:	e7f2      	b.n	80027e2 <__libc_init_array+0x1e>
 80027fc:	08002858 	.word	0x08002858
 8002800:	08002858 	.word	0x08002858
 8002804:	08002858 	.word	0x08002858
 8002808:	0800285c 	.word	0x0800285c

0800280c <memset>:
 800280c:	4603      	mov	r3, r0
 800280e:	4402      	add	r2, r0
 8002810:	4293      	cmp	r3, r2
 8002812:	d100      	bne.n	8002816 <memset+0xa>
 8002814:	4770      	bx	lr
 8002816:	f803 1b01 	strb.w	r1, [r3], #1
 800281a:	e7f9      	b.n	8002810 <memset+0x4>

0800281c <_init>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr

08002828 <_fini>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	bf00      	nop
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr
